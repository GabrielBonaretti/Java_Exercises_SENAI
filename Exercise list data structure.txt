Exercise List about Data Structure in Java    

1 - ArrayList Operations: Write a Java program that demonstrates various operations on an ArrayList, such as adding elements, removing elements, retrieving elements at specific indices, and iterating through the list using a for-each loop.

2 - Set Operations: Write a Java program that uses a Set to store a collection of unique elements. Implement operations such as adding elements, removing elements, checking if an element exists, and iterating through the Set using an iterator.

3 - Map Operations: Write a Java program that uses a Map to store key-value pairs. Implement operations such as adding key-value pairs, removing key-value pairs, retrieving values by keys, and iterating through the Map using keySet() and entrySet().

4 - ArrayList vs. LinkedList: Compare the performance of ArrayList and LinkedList in Java by measuring the time taken for various operations such as adding elements, removing elements, and retrieving elements at specific indices. Analyze the results and draw conclusions.

5 - Set Intersection and Union: Write a Java program that takes two Sets as input and computes their intersection and union. Display the results in the form of Sets.

6 - Map Manipulation: Write a Java program that reads data from a Map, performs various manipulations such as sorting by keys or values, finding the maximum or minimum value, and displaying the results.

7 - ArrayList Sorting: Write a Java program that reads a list of objects from an ArrayList and implements sorting based on a specific attribute of the objects. Demonstrate sorting in ascending and descending order using Comparable and Comparator interfaces.

8 - Set Operations with Custom Objects: Write a Java program that uses a Set to store custom objects. Implement operations such as adding objects, removing objects based on specific criteria, and checking if an object exists in the Set.

9 - Map Operations with Custom Objects: Write a Java program that uses a Map to store custom objects as key-value pairs. Implement operations such as adding key-value pairs, removing key-value pairs based on specific criteria, and retrieving values by keys.

10 - Map Merge and Compute: Write a Java program that demonstrates the use of merge() and compute() methods in Map interface. Implement operations such as merging key-value pairs, updating values based on keys, and handling cases where keys are not present in the Map.